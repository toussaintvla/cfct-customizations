---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates custom AWS IAM Password Policy

Parameters:
  pRequireUppercaseCharacters:
    Type: String
    Description: Require Uppercase Characters in Password. CIS Requiremet - True
    AllowedValues:
      - 'True'
      - 'False'
  pRequireLowercaseCharacters:
    Type: String
    Description: Require Lowercase Characters in Password. CIS Requiremet - True
    AllowedValues:
      - 'True'
      - 'False'
  pRequireSymbols:
    Type: String
    Description: Require Symbols in Password. CIS Requiremet - True
    AllowedValues:
      - 'True'
      - 'False'
  pRequireNumbers:
    Type: String
    Description: Require Numbers in Password. CIS Requiremet - True
    AllowedValues:
      - 'True'
      - 'False'
  pMinimumPasswordLength:
    Type: Number
    Description: Require Minimum Password Length. CIS Requirement - 14
  pPasswordReusePrevention:
    Type: Number
    Description: Restrict password reuse to atleast how many resets. CIS Requirement - 24
  pMaxPasswordAge:
    Type: Number
    Description: Restrict max password age in days CIS Requirement - 90
  pAllowUsersToChangePassword:
    Type: String
    Description: Allow users to change their passwords
    AllowedValues:
      - 'True'
      - 'False'
  pHardExpiry:
    Type: String
    Description: Restrict reset of expired passwords
    AllowedValues:
      - 'True'
      - 'False'

Resources:
#####################################################
# Preventative Control IAM Role for Password Policy #
#####################################################
  IAMPasswordPolicyLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "IAM Role for preventative controls"
          - id: W28
            reason: "CT Standard Naming"
    Properties:
      RoleName: !Sub cfct-${AWS::AccountId}-IAMPasswordLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${AWS::AccountId}-iampasswordpolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:UpdateAccountPasswordPolicy
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:*:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*

#################################################
# AWS Password Policy Baseline                  #
#################################################
  AWSControlTowerPasswordPolicyCustomResource:
    Type: Custom::PasswordPolicy
    Properties:
      ServiceToken: !GetAtt AWSControlTowerPasswordPolicyCustomResourceLambda.Arn

  AWSControlTowerPasswordPolicyCustomResourceLambda:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Included in attached IAM policy"
    Properties:
      Description: This Lambda is a custom resource to launch IAM Password Policy
      Handler: index.lambda_handler
      Role: !GetAtt IAMPasswordPolicyLambdaRole.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          RequireUppercaseCharacters: !Ref pRequireUppercaseCharacters
          RequireLowercaseCharacters: !Ref pRequireLowercaseCharacters
          RequireSymbols: !Ref pRequireSymbols
          RequireNumbers: !Ref pRequireNumbers
          MinimumPasswordLength: !Ref pMinimumPasswordLength
          PasswordReusePrevention: !Ref pPasswordReusePrevention
          MaxPasswordAge: !Ref pMaxPasswordAge
          AllowUsersToChangePassword: !Ref pAllowUsersToChangePassword
          HardExpiry: !Ref pHardExpiry
      Code:
        ZipFile: |
          import os
          import boto3
          import botocore
          import cfnresponse

          def lambda_handler(event, context):
              client = boto3.client('iam')
              # Environmental Variables
              require_upper_case = os.environ['RequireUppercaseCharacters']
              require_lower_case = os.environ['RequireLowercaseCharacters']
              require_symbols = os.environ['RequireSymbols']
              require_numbers = os.environ['RequireNumbers']
              require_password_length = os.environ['MinimumPasswordLength']
              require_password_reuse = os.environ['PasswordReusePrevention']
              require_password_age = os.environ['MaxPasswordAge']
              allow_pass_reset = os.environ['AllowUsersToChangePassword']
              require_hard_expire = os.environ['HardExpiry']

              # Converting Environmental Vars
              if require_upper_case == 'True':
                uppercase = True
              else:
                uppercase = False

              if require_lower_case == 'True':
                lowercase = True
              else:
                lowercase = False

              if require_symbols == 'True':
                symbols = True
              else:
                symbols = False

              if require_numbers == 'True':
                numbers = True
              else:
                numbers = False

              pass_length = int(require_password_length)
              pass_reuse = int(require_password_reuse)
              pass_age = int(require_password_age)

              if allow_pass_reset == 'True':
                change = True
              else:
                change = False

              if require_hard_expire == 'True':
                expire = True
              else:
                expire = False

              try:
                  client.update_account_password_policy(
                      RequireUppercaseCharacters=uppercase,
                      RequireLowercaseCharacters=lowercase,
                      RequireSymbols=symbols,
                      RequireNumbers=numbers,
                      MinimumPasswordLength=pass_length,
                      PasswordReusePrevention=pass_reuse,
                      MaxPasswordAge=pass_age,
                      AllowUsersToChangePassword=change,
                      HardExpiry=expire
                  )

              except botocore.exceptions.ClientError as e:
                  print(e.response['Error']['Message'])
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')
                  raise e

              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
